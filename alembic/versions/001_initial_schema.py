"""Initial database schema

Revision ID: 001
Revises: 
Create Date: 2025-01-16 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('endpoints',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('url', sa.String(length=2048), nullable=False),
    sa.Column('auth_type', sa.Enum('NONE', 'BEARER', 'API_KEY', 'BASIC', name='authtype'), nullable=False),
    sa.Column('auth_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timeout_seconds', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('health_check_enabled', sa.Boolean(), nullable=False),
    sa.Column('health_check_interval', sa.Integer(), nullable=False),
    sa.Column('total_requests', sa.Integer(), nullable=False),
    sa.Column('total_failures', sa.Integer(), nullable=False),
    sa.Column('avg_response_time_ms', sa.Float(), nullable=True),
    sa.Column('failure_threshold', sa.Integer(), nullable=False),
    sa.Column('circuit_breaker_timeout', sa.Integer(), nullable=False),
    sa.Column('is_circuit_open', sa.Boolean(), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('queries',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('query_text', sa.Text(), nullable=False),
    sa.Column('query_type', sa.Enum('QUERY', 'MUTATION', 'SUBSCRIPTION', name='querytype'), nullable=False),
    sa.Column('default_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('expected_complexity', sa.Integer(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('total_executions', sa.Integer(), nullable=False),
    sa.Column('total_failures', sa.Integer(), nullable=False),
    sa.Column('avg_response_time_ms', sa.Float(), nullable=True),
    sa.Column('avg_complexity', sa.Float(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('parent_query_id', sa.String(length=255), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('example_use_case', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('health_checks',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('endpoint_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('status', sa.Enum('HEALTHY', 'DEGRADED', 'UNHEALTHY', 'UNKNOWN', name='healthstatus'), nullable=False),
    sa.Column('checked_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('response_time_ms', sa.Float(), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('http_status_code', sa.Integer(), nullable=True),
    sa.Column('check_type', sa.String(length=50), nullable=False),
    sa.Column('check_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['endpoint_id'], ['endpoints.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('query_executions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('query_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('endpoint_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'SUCCESS', 'FAILED', 'TIMEOUT', 'CANCELLED', name='executionstatus'), nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('response_time_ms', sa.Float(), nullable=True),
    sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('complexity_score', sa.Integer(), nullable=True),
    sa.Column('operation_name', sa.String(length=255), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('trace_id', sa.String(length=255), nullable=True),
    sa.Column('span_id', sa.String(length=255), nullable=True),
    sa.Column('execution_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('triggered_by', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['endpoint_id'], ['endpoints.id'], ),
    sa.ForeignKeyConstraint(['query_id'], ['queries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scheduled_queries',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('query_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('endpoint_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('cron_expression', sa.String(length=100), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timeout_seconds', sa.Integer(), nullable=True),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'PAUSED', 'DISABLED', 'ERROR', name='schedulestatus'), nullable=False),
    sa.Column('next_run_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_run_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_success_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('consecutive_failures', sa.Integer(), nullable=False),
    sa.Column('max_consecutive_failures', sa.Integer(), nullable=False),
    sa.Column('failure_threshold_reached', sa.Boolean(), nullable=False),
    sa.Column('total_runs', sa.Integer(), nullable=False),
    sa.Column('successful_runs', sa.Integer(), nullable=False),
    sa.Column('failed_runs', sa.Integer(), nullable=False),
    sa.Column('notify_on_failure', sa.Boolean(), nullable=False),
    sa.Column('notify_on_success', sa.Boolean(), nullable=False),
    sa.Column('notification_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('last_execution_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_error_message', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['endpoint_id'], ['endpoints.id'], ),
    sa.ForeignKeyConstraint(['query_id'], ['queries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('scheduled_queries')
    op.drop_table('query_executions')
    op.drop_table('health_checks')
    op.drop_table('queries')
    op.drop_table('endpoints')
    # ### end Alembic commands ###